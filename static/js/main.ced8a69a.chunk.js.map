{"version":3,"sources":["redux/types/weatherInfoTypes.js","components/RadioButtons.jsx","components/Arrows.jsx","components/LoadingScreen.jsx","common/index.js","components/WeatherCard.jsx","components/Barchart.jsx","containers/weatherInfo.js","redux/actions/weatherInfoActions.js","App.js","reportWebVitals.js","redux/reducers/weatherReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["GET_WEATHER_REQUEST","GET_WEATHER_SUCCESS","GET_WEATHER_FAILURE","RadioButtons","selectedValue","handleRadioChange","FormControl","component","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","value","control","Radio","color","label","checked","onChange","useStyles","makeStyles","container","display","alignItems","cursor","hideArrow","RightArrow","next","end","data","classes","className","length","onClick","style","fontSize","LeftArrow","prev","start","transform","justifyContent","height","width","LoadingScreen","toCelsius","Math","round","root","bullet","margin","title","pos","marginBottom","WearherCard","weather","scaleType","handleSetCurrentWeather","currentWeather","getAverageTemperature","weatherSegments","total","main","temp","console","log","date","Card","border","CardContent","Typography","variant","Date","year","Intl","DateTimeFormat","format","month","day","slice","formatDate","rawDate","theme","createStyles","paper","padding","spacing","Barchart","React","setData","result","map","item","dt","toLocaleTimeString","Paper","chartType","loader","options","legend","position","axes","y","0","side","rootProps","cardsContainer","graphsContainer","radioContainer","arrowContaner","arrowLeftContaner","arrowRightContaner","WeatherInfo","useState","paginatedWeather","setPaginatedWeather","setStart","setEnd","setSelectedValue","setCurrentWeather","event","target","dispatch","useDispatch","weatherInfo","useSelector","state","useEffect","a","type","fetch","process","then","response","json","payload","catch","error","pageSize","pageNumber","newEnd","newStart","isFetching","float","require","config","App","props","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","reducer","action","sortedWeatherDays","sortedWeatherDates","list","i","includes","toLocaleDateString","j","push","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ced8a69a.chunk.js","sourcesContent":["export const GET_WEATHER_REQUEST = 'GET_WEATHER_REQUEST';\nexport const GET_WEATHER_SUCCESS = 'GET_WEATHER_SUCCESS';\nexport const GET_WEATHER_FAILURE = 'GET_WEATHER_FAILURE';\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nexport default function RadioButtons({selectedValue, handleRadioChange}) {\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"Fahrenheit\">\n        <FormControlLabel \n          value=\"celsius\" \n          control={<Radio color=\"primary\" />} \n          label=\"Celsius\" \n          checked={selectedValue === 'celsius'}\n        onChange={handleRadioChange} \n        />\n        <FormControlLabel \n          value=\"Fahrenheit\" \n          control={<Radio color=\"primary\" />} \n          label=\"Fahrenheit\" \n          checked={selectedValue === 'Fahrenheit'}\n        onChange={handleRadioChange}/>\n      </RadioGroup>\n    </FormControl>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ForwardIcon from '@material-ui/icons/Forward';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer'\n   },\n   hideArrow: {\n     display: 'none'\n   }\n});\n\n\nexport function RightArrow({next, end, data}) {\n    const classes = useStyles();\n    return <div \n      className={`${classes.container} ${end===data.length?classes.hideArrow: {}}`} \n      onClick={() => next()}\n    >\n      <ForwardIcon style={{ color: 'rgb(66, 133, 244)', fontSize: '100px',}}/>\n    </div>;\n}\n\nexport function LeftArrow({prev, start}) {\n  const classes = useStyles();\n  return <div \n      className={`${classes.container} ${start===0?classes.hideArrow: {}}`} \n      onClick={() => prev()}\n    >\n      <ForwardIcon style={{transform: 'rotate(180deg)', color: 'rgb(66, 133, 244)', fontSize: '100px'}}/>\n  </div>;\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100vh',\n        fontSize: '1.25rem',\n        width: '100%'\n     },\n     \n  });\n\nfunction LoadingScreen() {\n    const classes = useStyles();\n    return (\n        <div className={classes.container}>\n            loading....\n        </div>\n    )\n}\n\nexport default LoadingScreen;\n\n","export const toCelsius = (data) => {\n    return Math.round((data - 32) * 5/9)\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport {toCelsius} from '../common'\n\nconst useStyles = makeStyles({\n  root: {\n    width: '30%'\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function WearherCard({weather, scaleType, handleSetCurrentWeather, currentWeather}) {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\nconst getAverageTemperature = (weatherSegments) => {\n    let total = 0;\n    for(let i of weatherSegments){\n        total += i.main.temp\n    }\n    return Math.round(total/weatherSegments.length)\n}\n\nconst formatDate = (data) => {\n  let date = new Date(data * 1000);\nlet year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date);\nlet month = new Intl.DateTimeFormat('en', { month: 'short' }).format(date);\nlet day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date);\nreturn `${day} ${month} ${year.slice(2)}`\n}\nconsole.log(\"currentWeather.data === weather.date ++\",currentWeather.date, weather.date)\n  return (\n    <Card className={classes.root} onClick={() => handleSetCurrentWeather(weather)} style={currentWeather.date === weather.date? {border: '2px solid black'}: {}} >\n      <CardContent>\n      <Typography variant=\"h5\" component=\"h2\">\n        Temp:\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n        {scaleType === 'celsius'?`${toCelsius(getAverageTemperature(weather.weatherSegments))}C`: `${getAverageTemperature(weather.weatherSegments)}F`}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n        Date:\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n        {weather && formatDate(weather.rawDate)}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n        ...\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Chart from \"react-google-charts\";\nimport {toCelsius} from '../common'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(5),\n    },\n  }),\n);\n\nexport default function Barchart ({currentWeather, scaleType}) {\nconst [data ,setData] = React.useState([]); \nconst classes = useStyles();\n\nReact.useEffect(() => {\n  let i = 100\n  let result = currentWeather.weatherSegments && currentWeather.weatherSegments.map(item => {\n    return [new Date(item.dt).toLocaleTimeString(), scaleType === 'celsius'?`${toCelsius(item.main.temp)}C`: `${Math.round(item.main.temp)}F`]\n  });\n  setData(result)\n  console.log(result);\n}, [currentWeather.date, scaleType])\n    return (\n      <Paper className={classes.paper}>\n       <Chart\n          width={'100%'}\n          height={'400px'}\n          chartType=\"Bar\"\n          loader={<div>Loading Chart</div>}\n          data={[\n            ['Time', 'temp'],\n            ...data\n          ]}\n          options={{\n            legend: { position: 'none' },\n            axes: {\n              y: {\n                0: { side: 'none' },\n              },\n            },\n          }}\n          rootProps={{ 'data-testid': '2' }}\n        />\n      </Paper>\n    );\n  }\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { getWeatherInfo } from \"../redux/actions/weatherInfoActions\";\nimport RadioButtons from \"../components/RadioButtons.jsx\";\nimport { RightArrow, LeftArrow } from \"../components/Arrows.jsx\";\nimport LoadingScreen from \"../components/LoadingScreen\";\nimport WeatherCard from \"../components/WeatherCard\";\nimport Barchart from \"../components/Barchart\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    cardsContainer: {\n      display: \"flex\",\n      justifyContent: \"space-evenly\",\n      width: \"100%\",\n      marginBottom: \"10px\",\n    },\n    graphsContainer: {\n      width: \"100%\",\n    },\n    radioContainer: {\n      display: \"flex\",\n      width: \"100%\",\n      height: \"100px\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    arrowContaner: {\n      display: \"flex\",\n      width: \"100%\",\n      justifyContent: \"center\",\n      height: \"100px\",\n    },\n    arrowLeftContaner: {\n      width: \"40%\",\n    },\n    arrowRightContaner: {\n      width: \"40%\",\n    },\n  })\n);\n\nexport default function WeatherInfo() {\n  const [paginatedWeather, setPaginatedWeather] = React.useState([]);\n  const [start, setStart] = React.useState(0);\n  const [end, setEnd] = React.useState(3);\n  const [selectedValue, setSelectedValue] = React.useState(\"Fahrenheit\");\n  const [currentWeather, setCurrentWeather] = React.useState([]);\n\n  const handleRadioChange = (event) => {\n    setSelectedValue(event.target.value);\n  };\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const weatherInfo = useSelector((state) => state);\n\n  React.useEffect(() => {\n    dispatch(getWeatherInfo());\n  }, []);\n\n  const paginate = (data, pageSize, pageNumber) => {\n    return data.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);\n  };\n\n  React.useEffect(() => {\n    if (\n      weatherInfo.weather.weatherInfo &&\n      weatherInfo.weather.weatherInfo.length !== 0\n    ) {\n      let result = paginate(weatherInfo.weather.weatherInfo, 3, 1);\n      setPaginatedWeather(result);\n      handleSetCurrentWeather(result[0]);\n    }\n  }, [weatherInfo.weather.weatherInfo.length]);\n\n  const prev = () => {\n    const newEnd = end - 1;\n    const newStart = start - 1;\n    if (newStart >= 0) {\n      const result = weatherInfo.weather.weatherInfo.slice(newStart, newEnd);\n      setPaginatedWeather(result);\n      setStart(newStart);\n      setEnd(newEnd);\n    }\n  };\n\n  const next = () => {\n    const newEnd = end + 1;\n    const newStart = start + 1;\n    if (newEnd <= weatherInfo.weather.weatherInfo.length) {\n      const result = weatherInfo.weather.weatherInfo.slice(newStart, newEnd);\n      setPaginatedWeather(result);\n      setStart(newStart);\n      setEnd(newEnd);\n    }\n  };\n\n  const handleSetCurrentWeather = (weather) => {\n    setCurrentWeather(weather);\n  };\n\n  const renderData = () => {\n    if (weatherInfo.weather.isFetching) {\n      return <LoadingScreen />;\n    } else {\n      return (\n        <div>\n          <div className={classes.radioContainer}>\n            <RadioButtons\n              handleRadioChange={handleRadioChange}\n              selectedValue={selectedValue}\n            />\n          </div>\n          <div className={classes.arrowContaner}>\n            <div className={classes.arrowLeftContaner}>\n              <LeftArrow prev={prev} start={start} />\n            </div>\n            <div className={classes.arrowRightContaner}>\n              <div style={{ float: \"right\" }}>\n                <RightArrow\n                  next={next}\n                  end={end}\n                  data={weatherInfo.weather.weatherInfo}\n                />\n              </div>\n            </div>\n          </div>\n          <div className={classes.cardsContainer}>\n            {paginatedWeather &&\n              paginatedWeather.map((weather) => (\n                <WeatherCard\n                  key={weather.date}\n                  weather={weather}\n                  currentWeather={currentWeather}\n                  scaleType={selectedValue}\n                  handleSetCurrentWeather={handleSetCurrentWeather}\n                />\n              ))}\n          </div>\n          <div className={classes.graphsContainer}>\n            {currentWeather.length !== 0 ? (\n              <Barchart\n                currentWeather={currentWeather}\n                scaleType={selectedValue}\n              />\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      );\n    }\n  };\n  return renderData();\n}\n","import {\n    GET_WEATHER_REQUEST,\n    GET_WEATHER_SUCCESS,\n    GET_WEATHER_FAILURE,\n  } from \"../types/weatherInfoTypes\";\n\nexport const getWeatherInfo = () => async (dispatch) => {\n    dispatch({type: GET_WEATHER_REQUEST});\n    const url = process.env.REACT_APP_OPEN_WEATHER_MAP_URL;\n    return fetch(url)\n    .then(response => response.json())\n    .then(data => {console.log(data)\n        return dispatch({type: GET_WEATHER_SUCCESS, payload: data })\n    }).catch(error => {\n        return dispatch({type: GET_WEATHER_FAILURE, payload: error })\n    });\n  };\n","import React from \"react\"\nimport \"./App.css\"\nimport WeatherInfo from './containers/weatherInfo';\nrequire('dotenv').config()\n\nfunction App(props) {\n  return (\n      <WeatherInfo />\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  GET_WEATHER_REQUEST,\n  GET_WEATHER_SUCCESS,\n  GET_WEATHER_FAILURE,\n} from \"../types/weatherInfoTypes\";\n\nconst INITIAL_STATE = {\n  weatherInfo: [],\n  error: {},\n  isFetching: true\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case GET_WEATHER_REQUEST:\n      return {\n        ...state,\n        isFetching: true\n      };\n\n    case GET_WEATHER_SUCCESS:\n      let sortedWeatherDays = [] ;\n      let sortedWeatherDates = [] ;\n      for(let i of action.payload.list){\n        if(sortedWeatherDates.includes(new Date(i.dt * 1000).toLocaleDateString())){\n          for(let j of sortedWeatherDays){\n            if(j.date === new Date(i.dt * 1000).toLocaleDateString()){\n                j.weatherSegments.push(i)\n            }\n          }\n        }\n        else{\n          sortedWeatherDates.push(new Date(i.dt * 1000).toLocaleDateString())\n          sortedWeatherDays.push({\n            date: new Date(i.dt * 1000).toLocaleDateString(), \n            weatherSegments: [i],\n            rawDate: i.dt\n          })\n        }  \n      }\n      \n      return {\n        ...state,\n        weatherInfo: sortedWeatherDays,\n        isFetching: false\n      };\n\n    case GET_WEATHER_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n        isFetching: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport weather from './reducers/weatherReducer';\n\nconst rootReducer = combineReducers({\n    weather,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './rootReducer.js';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}